name: Game Update Runner

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:

jobs:
  check-tf2-build:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.changed }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup SteamCMD
        uses: CyberAndrii/setup-steamcmd@v1

      - name: Restore previous build ID from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: build-id.txt
          key: tf2-build-${{ github.repository }}

      - name: Check TF2 build and trigger if changed
        id: check
        run: |
          # Get current build ID
          steamcmd +login anonymous +app_info_print 232250 +quit | grep -A 5 '"public"' | grep '"buildid"' | sed 's/.*"buildid"[[:space:]]*"\([^"]*\)".*/\1/' > current.txt
          CURR=$(cat current.txt)
          
          PREV=""
          [ -f "build-id.txt" ] && PREV=$(cat build-id.txt)
          
          if [ "$CURR" != "$PREV" ] && [ -n "$CURR" ]; then
            echo "Build changed! Will trigger Docker build..."
            
            # Save new build ID for next run
            echo "$CURR" > build-id.txt
            echo "changed=true" >> $GITHUB_OUTPUT
            
            echo "Build ID changed to $CURR"
          else
            echo "No new build change detected"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Save build ID to cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: build-id.txt
          key: tf2-build-${{ github.repository }}-${{ github.run_id }}

  build-and-push:
    needs: check-tf2-build
    if: needs.check-tf2-build.outputs.changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg GH_PAT=${{ secrets.GH_PAT }} \
            --build-arg MATCHA_API_KEY=${{ secrets.MATCHA_API_KEY }} \
            --build-arg MATCHA_API_DETAILS_URL=${{ secrets.MATCHA_API_DETAILS_URL }} \
            -t ${{ vars.DOCKERHUB_REPO }}:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ vars.DOCKERHUB_REPO }}:latest